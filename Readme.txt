---Версия 2.0---
Реализована регистрация и авторизация пользователей при помощи JWT токенов.
По умолчанию при запуске сервера создается пользователь с именем admin и паролем admin.

Раздельно для каждого пользователя добавляются задачи, а так же выводится список только задач пользователя.
Просмотреть не свою задачу по id нельзя. Время действия токена установлена 2 минуты.

Страница регистрации http://localhost:8080/reg?login=user&password=user
Страница авторизации http://localhost:8080/auth?login=admin&password=admin

---База данных---
Для хранения всей информации используется БД SQLite, в том числе о пользователях.

---Тестирование---
Некоторые функции покрыты тестами server_test.go
1. Успешное добавление выражение на вычисление
2. Добавление пустого выражения на вычисление
3. Получения несуществующей задачи по ее ID
4. Успешная авторизация
5. Не успешная авторизация
6. Успешная регистрация

---gRPC---
gRPC реализован для обмена состоянием агента с сервером. gRPC сервер запускается параллельно основному серверу на порту 8081
Агент при запуске подключается к gRPC серверу и устанавливает свое состояние (ID, Active, LastSeen).

---Описание---
Приложение состоит из сервера и агентов которых можно запустить любое количество, для теста создано 2 агента.
Агенты работают с операциями: +, -, *, /, (, ) и целыми числа (так проще вводить в строке браузера)
Важно! Так как выражения добавляются прямо из строки браузера, операцию "+" необходимо заменить на соответствующий код %2B, так как
браузер знак "+" интерпритирует как пробел. Остальные символы -, *, /, (, ) заменять не нужно.
Например, что бы добавить для просчета выражение "2+2" нужно ввести "2%2B2"
Агент по умолчанию может забрать до 2 выражений на просчет

---Установка---
Версия go - 1.21.
Создайте проект с именем "YandexGO_Arithmetic_v2" (без кавычек), скопируйте в него скаченные файлы. Установите зависимые пакеты. Рекомендую имеенно этот способ, что бы избежать перенастройки проекта.

!Если вы создадите проект с другим именем, то вам необходимо будет изменить путь к папке pb "имя_проекта/grpc" в 21 строке файла servergrpc.go и
в 4 строке файла agentgrpc.go, имя_проекта на то которое вы создали. Удалить файлы go.mod и go.sum, или заменить так же в go.mod в строке module
на имя вашего проекта!

Необходимые пакеты
go get -u github.com/dgrijalva/jwt-go
go get -u github.com/mattn/go-sqlite3
go get -u github.com/Knetic/govaluate
go get -u google.golang.org/grpc
go get -u google.golang.org/protobuf/types/known/timestamppb

Возможные пакеты
go get -u google.golang.org/protobuf/cmd/protoc-gen-go
go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc


Можно удалить ./calc.db что бы она пересоздалась при запуске сервера, что бы не осталось тестовых решенных выражений. Или оставьте, что бы не заполнять самим первые данные и
посмотреть на уже существующий вывод. 

---Запуск---
Для запуска сервера, запустите в IDE или скомпилируйте файл go build servergrpc.go. Для запуска агента, запустите в IDE или скомпилируйте файл go build agentgrpc.go.
Перед компиляцией не забываем переходить в папку где распологаются данные файлы.

---Сервер---
Запускается сервер из файла servergrpc.go - на порту 8080, при первоначальной инициализации создается база данных sqlite ./calc.db
По умолчанию время работы каждой операции устанавливается в 10 секунд, в дальнейшем задержки можно изменить вводя команды.
После запуска становятся доступны команды для работы с сервером. Смотреть ниже.
Выражения и время выполнения операций записывается в базу данных, по этому после перезапуска сервера выражения остануться.

---Агент---
Агент запускается файлом agentgrpc.go, для примера создано 2 агента. Каждый агент по умолчанию может забрать до 2 выражений на просчет
из списка выражений (можно изменить). Агент каждую секунду обращается к серверу, во время обращения его статус будет активным. Если в момент выполнения
агент был выключен и результат не был получен, то его статус изменится на неактивный, а сервер изменит статус задачи на "ожидание".

---Задачи---
После добавления задачи, каждая имеет свой статус. Можно посмотреть как весь лист задач, пользователь видит только свои задачи, так и конкретную задачу по ID, так же
только пользователя под котором был выполнен вход. Не свою задачу увидеть нельзя.
Задачи имеют статусы: ожидание, в работе, завершено, ошибка. В моменте можно увидеть какая задача обрабатывается каким агентом.
По завершению будет получен результат вычисления.

---Операции---
Агенты работают с операциями: +, -, *, /, (, ) по умолчанию устанавливается время выполнение каждой операции в 10 секунд.
Что бы изменить время выполнения используйте команды.

---Список команд---
http://localhost:8080/auth?login=admin&password=admin - авторизация пользователя admin с паролем admin
http://localhost:8080/reg?login=user&password=user - регистрация пользователя user с паролем user
http://localhost:8080/list - выводит список добавленых выражений
http://localhost:8080/oper - выводит список операций с таймаутами
http://localhost:8080/oper?plus=20 - изменяет время выполнения операции сложения на 20 секунды, можно установить свое любое
http://localhost:8080/oper?minus=30
http://localhost:8080/oper?multiply=40
http://localhost:8080/oper?divide=60
http://localhost:8080/?calc=2%2B2 - добавляет выражение "2+2" = 4 в список задач %2B - это +, операцию "+" всегда нужно менять на код
http://localhost:8080/?calc=2*3 - выражение "2*2" = 6
http://localhost:8080/?calc=1-3*2 - выражение "1-3*2" = -5
http://localhost:8080/?calc=2%2B(2-2)/2*2 - выражение 2+(2-2)/2*2 = 2
http://localhost:8080/id?num=1 - выводит задачу по указаному ID
http://localhost:8080/agents - статусы агентов

---Рекомендации---
1. Запустите сервер, проверьте его работу выполнив команды:
http://localhost:8080/auth?login=admin&password=admin - авторизироваться под пользователем admin с паролем admin
http://localhost:8080/list - список должен быть пустым, если вы удалили тестовую базу
http://localhost:8080/oper - выводит список операций с таймаутами
2. Измените таймауты соответствующими командами на свое усмотрение
3. Накидайте выражений в очередь, штук 10, так как каждый агент заберет на выполнение по умолчанию по 2 штуки
4. Запустить поочередно 3 агентов
5. Проверьте их статусы командой
http://localhost:8080/agents
6. Обновляйте http://localhost:8080/list - выражения разбираются агентами
7. Добавьте еще выражений
8. Остановите одного из агентов, и проверьте статусы http://localhost:8080/agents, агент должен быть "false"
9. Проверьте http://localhost:8080/list выражение обрабатываемые отключенным агентов, должны перейти в статус "ожидание" через 10 секунд
10. Дождитесь обработки всех задач

* Можно сначала запустить сервер и всех агентов, а потом добавлять задачи, тогда агенты сразу будут брать их в работу.

---Примеры---
Примеры работы распологаются в папке /screen

---TG---
https://t.me/aleshij
